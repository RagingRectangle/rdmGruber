{
   "boards": {
      "current": {
         "pokemonOptions": [{
               "label": "None",
               "value": "None"
            }, {
               "label": "Total Pokemon",
               "value": "current_total_pokemon"
            },
            {
               "label": "Total IV",
               "value": "current_iv_pokemon"
            },
            {
               "label": "Average IV",
               "value": "current_avg_iv"
            },
            {
               "label": "Hundos",
               "value": "current_100s"
            },
            {
               "label": "Nundos",
               "value": "current_0s"
            },
            {
               "label": "Total Shinies",
               "value": "current_shinies"
            },
            {
               "label": "Distinct Shinies",
               "value": "distinct_shinies"
            }
         ],
         "gymOptions": [{
               "label": "None",
               "value": "None"
            }, {
               "label": "Gyms",
               "value": "current_total_gyms"
            },
            {
               "label": "Battling",
               "value": "current_battling"
            },
            {
               "label": "Gym Teams",
               "value": "current_gym_teams"
            },
            {
               "label": "Raids",
               "value": "current_total_raids"
            },
            {
               "label": "Raid Tiers",
               "value": "current_raid_tiers"
            },
            {
               "label": "Eggs",
               "value": "current_total_eggs"
            },
            {
               "label": "Egg Tiers",
               "value": "current_egg_tiers"
            }
         ],
         "pokestopOptions": [{
               "label": "None",
               "value": "None"
            }, {
               "label": "Pokestops",
               "value": "current_total_pokestops"
            },
            {
               "label": "Quests",
               "value": "current_total_quests"
            },
            {
               "label": "Lures",
               "value": "current_total_lures"
            },
            {
               "label": "Lure Types",
               "value": "current_lure_types"
            },
            {
               "label": "Kecleon",
               "value": "current_total_kecleon"
            },
            {
               "label": "Grunts",
               "value": "current_total_grunts"
            },
            {
               "label": "Leaders",
               "value": "current_total_leaders"
            },
            {
               "label": "Leader Names",
               "value": "current_leader_names"
            }
         ],
         "updateIntervals": [{
               "label": "Every 5 Minutes",
               "value": "*/5 * * * *"
            },
            {
               "label": "Every 10 Minutes",
               "value": "*/10 * * * *"
            },
            {
               "label": "Every 15 Minutes",
               "value": "*/15 * * * *"
            },
            {
               "label": "Every 30 Minutes",
               "value": "*/30 * * * *"
            },
            {
               "label": "Every 60 Minutes",
               "value": "*/60 * * * *"
            }
         ]
      },
      "history": {
         "historyOptions": [{
               "label": "Total Pokemon",
               "value": "history_pokemon"
            },
            {
               "label": "Total IV Scanned",
               "value": "history_iv_pokemon"
            },
            {
               "label": "Total Hundos",
               "value": "history_hundos"
            },
            {
               "label": "Total Shinies",
               "value": "history_shinies"
            },
            {
               "label": "Total Invasions",
               "value": "history_invasions"
            },
            {
               "label": "Total Quests",
               "value": "history_quests"
            }
         ],
         "updateIntervals": [{
            "label": "Yesterday",
            "value": "1 Day"
         }, {
            "label": "The Last 2 Days",
            "value": "2 Day"
         }, {
            "label": "The Last 3 Days",
            "value": "3 Day"
         }, {
            "label": "The Last 5 Days",
            "value": "5 Day"
         }, {
            "label": "The Last Week",
            "value": "1 Week"
         }, {
            "label": "The Last 2 Weeks",
            "value": "2 Week"
         }, {
            "label": "The Last Month",
            "value": "1 Month"
         }, {
            "label": "The Last 2 Months",
            "value": "2 Month"
         }, {
            "label": "The Last 3 Months",
            "value": "3 Month"
         }, {
            "label": "The Last 6 Months",
            "value": "6 Month"
         }, {
            "label": "The Last Year",
            "value": "1 Year"
         }, {
            "label": "The Last 2 Years",
            "value": "2 Year"
         }, {
            "label": "The Last 3 Years",
            "value": "3 Year"
         }, {
            "label": "Total History",
            "value": "99 Year"
         }]
      },
      "kecleon": {
         "updateIntervals": [{
               "label": "Every 5 Minutes",
               "value": "*/5 * * * *"
            },
            {
               "label": "Every 10 Minutes",
               "value": "*/10 * * * *"
            },
            {
               "label": "Every 15 Minutes",
               "value": "*/15 * * * *"
            },
            {
               "label": "Every 30 Minutes",
               "value": "*/30 * * * *"
            },
            {
               "label": "Every 60 Minutes",
               "value": "*/60 * * * *"
            }
         ]
      },
      "raid": {
         "raidTiers": [{
               "label": "Tier 1",
               "value": "1"
            },
            {
               "label": "Tier 2",
               "value": "2"
            },
            {
               "label": "Tier 3",
               "value": "3"
            },
            {
               "label": "Tier 4",
               "value": "4"
            },
            {
               "label": "Tier 5 (Legendary)",
               "value": "5"
            },
            {
               "label": "Tier 6 (Mega)",
               "value": "6"
            },
            {
               "label": "Tier 7 (Legendary Mega)",
               "value": "7"
            },
            {
               "label": "Tier 8 (Ultra Beast)",
               "value": "8"
            },
            {
               "label": "Tier 9 (Elite)",
               "value": "9"
            },
            {
               "label": "Tier 10 (Primal)",
               "value": "10"
            },
            {
               "label": "Tier 11 (Shadow 1)",
               "value": "11"
            },
            {
               "label": "Tier 12 (Shadow 2)",
               "value": "12"
            },
            {
               "label": "Tier 13 (Shadow 3)",
               "value": "13"
            },
            {
               "label": "Tier 14 (Shadow 4)",
               "value": "14"
            },
            {
               "label": "Tier 15 (Shadow 5)",
               "value": "15"
            }
         ]
      },
      "leader": {
         "pokemonOptions": [{
               "label": "Pokemon Caught",
               "value": "caught_pokemon"
            },
            {
               "label": "Pikachu Caught",
               "value": "pikachu_caught"
            },
            {
               "label": "XL Magikarp",
               "value": "xl_karps"
            },
            {
               "label": "XS Rattata",
               "value": "xs_rats"
            },
            {
               "label": "Tiny Pokemon",
               "value": "tiny_pokemon_caught"
            },
            {
               "label": "Jumbo Pokemon",
               "value": "jumbo_pokemon_caught"
            },
            {
               "label": "Lure Catches",
               "value": "caught_at_lure"
            },
            {
               "label": "Berries Fed",
               "value": "berries_fed"
            }
         ],
         "pokestopOptions": [{
               "label": "Stops Spun",
               "value": "stops_spun"
            },
            {
               "label": "Unique Stops",
               "value": "unique_stops_spun"
            },
            {
               "label": "Quests Completed",
               "value": "quests"
            },
            {
               "label": "Grunts Defeated",
               "value": "grunts_defeated"
            },
            {
               "label": "Giovanni Defeated",
               "value": "giovanni_defeated"
            }
         ],
         "gymRaidOptions": [{
               "label": "Hours Defended",
               "value": "hours_defended"
            },
            {
               "label": "Normal Raids Won",
               "value": "normal_raids_won"
            },
            {
               "label": "Legendary Raids Won",
               "value": "legendary_raids_won"
            },
            {
               "label": "Unique Raid Bosses",
               "value": "unique_raid_bosses"
            },
            {
               "label": "Raids With Friends",
               "value": "raids_with_friends"
            },
            {
               "label": "Raid Achievements",
               "value": "raid_achievements"
            }
         ],
         "battleOptions": [{
               "label": "Battles Won",
               "value": "battles_won"
            },
            {
               "label": "Gym Battles Won",
               "value": "gym_battles_won"
            },
            {
               "label": "Trainer Battles Won",
               "value": "trainings_won"
            },
            {
               "label": "Battle League Rank",
               "value": "gbl_rank"
            },
            {
               "label": "Battle League Rating",
               "value": "gbl_rating"
            },
            {
               "label": "Great League Wins",
               "value": "league_great_won"
            },
            {
               "label": "Ultra League Wins",
               "value": "league_ultra_won"
            },
            {
               "label": "Master League Wins",
               "value": "league_master_won"
            }
         ],
         "otherOptions": [{
               "label": "XP Gained",
               "value": "xp"
            },
            {
               "label": "KM Walked",
               "value": "km_walked"
            },
            {
               "label": "Wayfarer Agreements",
               "value": "wayfarer_agreements"
            },
            {
               "label": "Photobombs",
               "value": "photobombs"
            },
            {
               "label": "Best Friends",
               "value": "best_friends"
            },
            {
               "label": "Best Buddies",
               "value": "best_buddies"
            },
            {
               "label": "Purified",
               "value": "purified"
            },
            {
               "label": "Evolved",
               "value": "evolved"
            },
            {
               "label": "Mega Evolved",
               "value": "mega_evos"
            },
            {
               "label": "Unique Megas",
               "value": "unique_mega_evos"
            },
            {
               "label": "Hatched",
               "value": "hatched"
            },
            {
               "label": "Trades",
               "value": "trades"
            },
            {
               "label": "Trade KM",
               "value": "trade_km"
            },
            {
               "label": "Finish Leaderboard",
               "value": "finishLeaderboard"
            }
         ],
         "otherTotalOptions": [{

               "label": "Players Included",
               "value": "playersIncluded"
            },
            {
               "label": "New Players Today",
               "value": "newPlayersToday"

            },
            {
               "label": "Finish Leaderboard",
               "value": "finishLeaderboard"
            }
         ],
         "updateIntervals": [{
               "label": "Every 5 Minutes",
               "value": "5"
            },
            {
               "label": "Every 10 Minutes",
               "value": "10"
            },
            {
               "label": "Every 15 Minutes",
               "value": "15"
            },
            {
               "label": "Every 30 Minutes",
               "value": "30"
            },
            {
               "label": "Every 60 Minutes",
               "value": "60"
            }
         ]
      }
   },
   "stats": {
      "workerStats": [{
            "label": "Mons Scanned",
            "value": "workerMonsScanned"
         },
         {
            "label": "Handling Time",
            "value": "workerHandlingTime"
         },
         {
            "label": "Locations Handled",
            "value": "workerLocations"
         },
         {
            "label": "Success Rate",
            "value": "workerSuccessRate"
         },
         {
            "label": "Lost Scanning",
            "value": "workerLostScanning"
         }
      ]
   },
   "queries": {
      "dirtyRead": "SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;",
      "current_total_pokemon": {
         "label": "{{{pokemonEmoji}}} {{Pokemon}}",
         "query": "SELECT count(*) as {{queryName}} FROM pokemon WHERE id IS NOT NULL AND expire_timestamp >= UNIX_TIMESTAMP() AND ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(pokemon.lat, pokemon.lon));"
      },
      "current_iv_pokemon": {
         "label": "{{{ivEmoji}}} {{With_IV}}",
         "query": "SELECT count(*) as {{queryName}} FROM pokemon WHERE id IS NOT NULL AND cp IS NOT NULL AND expire_timestamp >= UNIX_TIMESTAMP() AND ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(pokemon.lat, pokemon.lon));"
      },
      "current_avg_iv": {
         "label": "{{{averageEmoji}}} {{Average}}",
         "query": "SELECT AVG(iv) as {{queryName}} FROM pokemon WHERE iv IS NOT null AND expire_timestamp >= UNIX_TIMESTAMP() AND ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(pokemon.lat, pokemon.lon));"
      },
      "current_100s": {
         "label": "{{{hundosEmoji}}} {{Hundos}}",
         "query": "SELECT count(*) as {{queryName}} FROM pokemon WHERE iv = 100 AND expire_timestamp >= UNIX_TIMESTAMP() AND ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(pokemon.lat, pokemon.lon));"
      },
      "current_0s": {
         "label": "{{{nundosEmoji}}} {{Nundos}}",
         "query": "SELECT count(*) as {{queryName}} FROM pokemon WHERE iv = 0 AND expire_timestamp >= UNIX_TIMESTAMP() AND ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(pokemon.lat, pokemon.lon));"
      },
      "current_shinies": {
         "label": "{{{shiniesEmoji}}} {{Shinies}}",
         "query": "SELECT count(*) as {{queryName}} FROM pokemon WHERE shiny = 1 AND expire_timestamp >= UNIX_TIMESTAMP() AND ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(pokemon.lat, pokemon.lon));"
      },
      "distinct_shinies": {
         "label": "{{{shiniesEmoji}}} {{ShinySpecies}}",
         "query": "SELECT count(distinct(pokemon_id)) as {{queryName}} FROM pokemon WHERE shiny = 1 AND expire_timestamp >= UNIX_TIMESTAMP() AND ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(pokemon.lat, pokemon.lon));"
      },
      "current_total_gyms": {
         "label": "{{{gymsEmoji}}} {{Gyms}}",
         "query": "SELECT count(*) as {{queryName}} FROM gym WHERE ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(gym.lat, gym.lon));"
      },
      "current_gym_teams": {
         "label": "{{{gymsEmoji}}} {{Gyms}}",
         "query": "SELECT `Mystic`, `Valor`, `Instinct`, `Neutral` FROM (SELECT COUNT(CASE WHEN team_id = 1 THEN 1 END) AS `Mystic`, COUNT(CASE WHEN team_id = 2 THEN 1 END) AS `Valor`, COUNT(CASE WHEN team_id = 3 THEN 1 END) AS `Instinct`, COUNT(CASE WHEN team_id = 0 THEN 1 END) AS `Neutral` FROM gym WHERE ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(gym.lat, gym.lon)))AS latte;"
      },
      "current_battling": {
         "label": "{{{battlingEmoji}}} {{Battling}}",
         "query": "SELECT count(*) as {{queryName}} FROM gym WHERE in_battle = 1 AND ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(gym.lat, gym.lon));"
      },
      "current_total_raids": {
         "label": "{{{raidsEmoji}}} {{Raids}}",
         "query": "SELECT count(*) as {{queryName}} FROM gym WHERE UNIX_TIMESTAMP() <= raid_end_timestamp AND UNIX_TIMESTAMP() >= raid_battle_timestamp AND raid_pokemon_move_1 > 0 AND ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(gym.lat, gym.lon));"
      },
      "current_raid_tiers": {
         "label": "{{{raidsEmoji}}} {{Raids}}",
         "query": "SELECT `tier_1`, `tier_2`, `tier_3`, `tier_4`, `tier_5`, `tier_6`, `tier_7`, `tier_8`, `tier_9`, `tier_10`, `tier_11`, `tier_12`, `tier_13`, `tier_14`, `tier_15` FROM (SELECT COUNT(CASE WHEN raid_level = 1 THEN 1 END) AS `tier_1`, COUNT(CASE WHEN raid_level = 2 THEN 1 END) AS `tier_2`, COUNT(CASE WHEN raid_level = 3 THEN 1 END) AS `tier_3`, COUNT(CASE WHEN raid_level = 4 THEN 1 END) AS `tier_4`, COUNT(CASE WHEN raid_level = 5 THEN 1 END) AS `tier_5`, COUNT(CASE WHEN raid_level = 6 THEN 1 END) AS `tier_6`, COUNT(CASE WHEN raid_level = 7 THEN 1 END) AS `tier_7`, COUNT(CASE WHEN raid_level = 8 THEN 1 END) AS `tier_8`, COUNT(CASE WHEN raid_level = 9 THEN 1 END) AS `tier_9`, COUNT(CASE WHEN raid_level = 10 THEN 1 END) AS `tier_10`, COUNT(CASE WHEN raid_level = 11 THEN 1 END) AS `tier_11`, COUNT(CASE WHEN raid_level = 12 THEN 1 END) AS `tier_12`, COUNT(CASE WHEN raid_level = 13 THEN 1 END) AS `tier_13`, COUNT(CASE WHEN raid_level = 14 THEN 1 END) AS `tier_14`, COUNT(CASE WHEN raid_level = 15 THEN 1 END) AS `tier_15` FROM gym WHERE raid_pokemon_move_1 > 0 AND ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(gym.lat, gym.lon))) AS latte;"
      },
      "current_raid_tiersREAL": {
         "label": "{{{raidsEmoji}}} {{Raids}}",
         "query": "SELECT `tier_1`, `tier_2`, `tier_3`, `tier_4`, `tier_5`, `tier_6`, `tier_7`, `tier_8`, `tier_9`, `tier_10`, `tier_11`, `tier_12`, `tier_13`, `tier_14`, `tier_15` FROM (SELECT COUNT(CASE WHEN raid_level = 1 THEN 1 END) AS `tier_1`, COUNT(CASE WHEN raid_level = 2 THEN 1 END) AS `tier_2`, COUNT(CASE WHEN raid_level = 3 THEN 1 END) AS `tier_3`, COUNT(CASE WHEN raid_level = 4 THEN 1 END) AS `tier_4`, COUNT(CASE WHEN raid_level = 5 THEN 1 END) AS `tier_5`, COUNT(CASE WHEN raid_level = 6 THEN 1 END) AS `tier_6`, COUNT(CASE WHEN raid_level = 7 THEN 1 END) AS `tier_7`, COUNT(CASE WHEN raid_level = 8 THEN 1 END) AS `tier_8`, COUNT(CASE WHEN raid_level = 9 THEN 1 END) AS `tier_9`, COUNT(CASE WHEN raid_level = 10 THEN 1 END) AS `tier_10`, COUNT(CASE WHEN raid_level = 11 THEN 1 END) AS `tier_11`, COUNT(CASE WHEN raid_level = 12 THEN 1 END) AS `tier_12`, COUNT(CASE WHEN raid_level = 13 THEN 1 END) AS `tier_13`, COUNT(CASE WHEN raid_level = 14 THEN 1 END) AS `tier_14`, COUNT(CASE WHEN raid_level = 15 THEN 1 END) AS `tier_15` FROM gym WHERE UNIX_TIMESTAMP() < raid_end_timestamp AND UNIX_TIMESTAMP() > raid_battle_timestamp AND raid_pokemon_move_1 > 0 AND ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(gym.lat, gym.lon))) AS latte;"
      },
      "current_total_eggs": {
         "label": "{{{eggsEmoji}}} {{Eggs}}",
         "query": "SELECT count(*) as {{queryName}} FROM gym WHERE UNIX_TIMESTAMP() >= raid_spawn_timestamp AND UNIX_TIMESTAMP() <= raid_battle_timestamp AND ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(gym.lat, gym.lon));"
      },
      "current_egg_tiers": {
         "label": "{{{eggsEmoji}}} {{Eggs}}",
         "query": "SELECT `tier_1`, `tier_2`, `tier_3`, `tier_4`, `tier_5`, `tier_6`, `tier_7`, `tier_8`, `tier_9`, `tier_10`, `tier_11`, `tier_12`, `tier_13`, `tier_14`, `tier_15` FROM (SELECT COUNT(CASE WHEN raid_level = 1 THEN 1 END) AS `tier_1`, COUNT(CASE WHEN raid_level = 2 THEN 1 END) AS `tier_2`, COUNT(CASE WHEN raid_level = 3 THEN 1 END) AS `tier_3`, COUNT(CASE WHEN raid_level = 4 THEN 1 END) AS `tier_4`, COUNT(CASE WHEN raid_level = 5 THEN 1 END) AS `tier_5`, COUNT(CASE WHEN raid_level = 6 THEN 1 END) AS `tier_6`, COUNT(CASE WHEN raid_level = 7 THEN 1 END) AS `tier_7`, COUNT(CASE WHEN raid_level = 8 THEN 1 END) AS `tier_8`, COUNT(CASE WHEN raid_level = 9 THEN 1 END) AS `tier_9`, COUNT(CASE WHEN raid_level = 10 THEN 1 END) AS `tier_10`, COUNT(CASE WHEN raid_level = 11 THEN 1 END) AS `tier_11`, COUNT(CASE WHEN raid_level = 12 THEN 1 END) AS `tier_12`, COUNT(CASE WHEN raid_level = 13 THEN 1 END) AS `tier_13`, COUNT(CASE WHEN raid_level = 14 THEN 1 END) AS `tier_14`, COUNT(CASE WHEN raid_level = 15 THEN 1 END) AS `tier_15` FROM gym WHERE ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(gym.lat, gym.lon))) AS latte;"
      },
      "current_egg_tiersREAL": {
         "label": "{{{eggsEmoji}}} {{Eggs}}",
         "query": "SELECT `tier_1`, `tier_2`, `tier_3`, `tier_4`, `tier_5`, `tier_6`, `tier_7`, `tier_8`, `tier_9`, `tier_10`, `tier_11`, `tier_12`, `tier_13`, `tier_14`, `tier_15` FROM (SELECT COUNT(CASE WHEN raid_level = 1 THEN 1 END) AS `tier_1`, COUNT(CASE WHEN raid_level = 2 THEN 1 END) AS `tier_2`, COUNT(CASE WHEN raid_level = 3 THEN 1 END) AS `tier_3`, COUNT(CASE WHEN raid_level = 4 THEN 1 END) AS `tier_4`, COUNT(CASE WHEN raid_level = 5 THEN 1 END) AS `tier_5`, COUNT(CASE WHEN raid_level = 6 THEN 1 END) AS `tier_6`, COUNT(CASE WHEN raid_level = 7 THEN 1 END) AS `tier_7`, COUNT(CASE WHEN raid_level = 8 THEN 1 END) AS `tier_8`, COUNT(CASE WHEN raid_level = 9 THEN 1 END) AS `tier_9`, COUNT(CASE WHEN raid_level = 10 THEN 1 END) AS `tier_10`, COUNT(CASE WHEN raid_level = 11 THEN 1 END) AS `tier_11`, COUNT(CASE WHEN raid_level = 12 THEN 1 END) AS `tier_12`, COUNT(CASE WHEN raid_level = 13 THEN 1 END) AS `tier_13`, COUNT(CASE WHEN raid_level = 14 THEN 1 END) AS `tier_14`, COUNT(CASE WHEN raid_level = 15 THEN 1 END) AS `tier_15` FROM gym WHERE UNIX_TIMESTAMP() < raid_battle_timestamp AND UNIX_TIMESTAMP() > raid_spawn_timestamp AND ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(gym.lat, gym.lon))) AS latte;"
      },
      "current_total_pokestops": {
         "label": "{{{pokestopsEmoji}}} {{Pokestops}}",
         "query": "SELECT count(*) as {{queryName}} from pokestop WHERE ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(pokestop.lat, pokestop.lon));"
      },
      "current_total_quests": {
         "label": "{{{questsEmoji}}} {{Quests}}",
         "query": "SELECT COUNT(CASE WHEN quest_conditions IS NOT null THEN 1 END) AS ar, COUNT(CASE WHEN alternative_quest_conditions IS NOT null THEN 1 END) AS non_ar, COUNT(*) as total FROM pokestop WHERE ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(pokestop.lat, pokestop.lon));"
      },
      "current_total_lures": {
         "label": "{{{luresEmoji}}} {{Lures}}",
         "query": "SELECT count(*) as {{queryName}} FROM pokestop WHERE UNIX_TIMESTAMP() <= lure_expire_timestamp AND ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(pokestop.lat, pokestop.lon));"
      },
      "current_lure_types": {
         "label": "{{{luresEmoji}}} {{Lures}}",
         "query": "SELECT `normal`, `glacial`, `mossy`, `magnetic`, `rainy`, `sparkly` FROM (SELECT COUNT(CASE WHEN lure_id = 501 THEN 1 END) AS `normal`, COUNT(CASE WHEN lure_id = 502 THEN 1 END) AS `glacial`, COUNT(CASE WHEN lure_id = 503 THEN 1 END) AS `mossy`, COUNT(CASE WHEN lure_id = 504 THEN 1 END) AS `magnetic`, COUNT(CASE WHEN lure_id = 505 THEN 1 END) AS `rainy` , COUNT(CASE WHEN lure_id = 506 THEN 1 END) AS `sparkly` FROM pokestop WHERE UNIX_TIMESTAMP() < lure_expire_timestamp AND ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(pokestop.lat, pokestop.lon)))AS latte;"
      },
      "current_total_kecleon": {
         "label": "{{{kecleonEmoji}}} {{Kecleon}}",
         "query": "SELECT count(*) FROM incident a, pokestop b WHERE a.pokestop_id = b.id AND UNIX_TIMESTAMP() < a.expiration AND a.display_type = '8' AND ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(b.lat, b.lon));"
      },
      "current_total_grunts": {
         "label": "{{{gruntsEmoji}}} {{Grunts}}",
         "query": "SELECT count(*) FROM incident a, pokestop b WHERE a.pokestop_id = b.id AND UNIX_TIMESTAMP() < a.expiration AND a.character NOT IN ('41','42','43','44') AND a.display_type != '8' AND ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(b.lat, b.lon));"
      },
      "current_total_leaders": {
         "label": "{{{leadersEmoji}}} {{Leaders}}",
         "query": "SELECT count(*) FROM incident a, pokestop b WHERE a.pokestop_id = b.id AND UNIX_TIMESTAMP() < a.expiration AND a.character IN ('41','42','43','44') AND ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(b.lat, b.lon));"
      },
      "current_leader_names": {
         "label": "{{{leadersEmoji}}} {{Leaders}}",
         "query": "SELECT a.character, count(*) FROM incident a, pokestop b WHERE a.pokestop_id = b.id AND UNIX_TIMESTAMP() < a.expiration AND a.character IN ('41','42','43','44') AND ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(b.lat, b.lon)) group by a.character;"
      },
      "history_pokemon": {
         "label": "{{{pokemonEmoji}}} {{Pokemon}}",
         "query": "SELECT SUM(count) FROM pokemon_stats WHERE DATE(date) > curdate() - interval {{interval}} - interval 1 day AND DATE(date) != curdate();"
      },
      "history_iv_pokemon": {
         "label": "{{{ivEmoji}}} {{With_IV}}",
         "query": "SELECT SUM(count) FROM pokemon_iv_stats WHERE DATE(date) > curdate() - interval {{interval}} - interval 1 day AND DATE(date) != curdate();"
      },
      "history_hundos": {
         "label": "{{{hundosEmoji}}} {{Hundos}}",
         "query": "SELECT SUM(count) FROM pokemon_hundo_stats WHERE DATE(date) > curdate() - interval {{interval}} - interval 1 day AND DATE(date) != curdate();"
      },
      "history_shinies": {
         "label": "{{{shiniesEmoji}}} {{Shinies}}",
         "query": "SELECT SUM(count) FROM pokemon_shiny_stats WHERE DATE(date) > curdate() - interval {{interval}} - interval 1 day AND DATE(date) != curdate();"
      },
      "history_invasions": {
         "label": "{{{gruntsEmoji}}} {{Invasions}}",
         "query": "SELECT SUM(count) FROM invasion_stats WHERE DATE(date) > curdate() - interval {{interval}} - interval 1 day AND DATE(date) != curdate();"
      },
      "history_quests": {
         "label": "{{{questsEmoji}}} {{Quests}}",
         "query": "SELECT SUM(count) FROM quest_stats WHERE DATE(date) > curdate() - interval {{interval}} - interval 1 day AND DATE(date) != curdate();"
      },
      "raids": {
         "query": "SELECT lat, lon, name, raid_spawn_timestamp, raid_battle_timestamp, raid_end_timestamp, raid_pokemon_id, team_id, raid_level, raid_pokemon_move_1, raid_pokemon_move_2, raid_pokemon_form, raid_pokemon_gender, raid_pokemon_costume, raid_pokemon_evolution FROM gym WHERE UNIX_TIMESTAMP() < raid_end_timestamp AND UNIX_TIMESTAMP() > raid_battle_timestamp AND raid_level in ({{tiers}}) AND raid_pokemon_id != 0 AND raid_pokemon_move_1 > 0 AND ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(gym.lat, gym.lon)) ORDER BY raid_end_timestamp ASC;"
      },
      "eggs": {
         "query": "SELECT lat, lon, name, raid_spawn_timestamp, raid_battle_timestamp, raid_end_timestamp, raid_pokemon_id, team_id, raid_level, raid_pokemon_move_1, raid_pokemon_move_2, raid_pokemon_form, raid_pokemon_gender, raid_pokemon_costume, raid_pokemon_evolution FROM gym WHERE UNIX_TIMESTAMP() < raid_battle_timestamp AND UNIX_TIMESTAMP() > raid_spawn_timestamp AND raid_level in ({{tiers}}) AND ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(gym.lat, gym.lon)) ORDER BY raid_end_timestamp ASC;"
      },
      "kecleon": {
         "query": "SELECT a.lat, a.lon, a.name, b.expiration FROM pokestop a, incident b WHERE a.id = b.pokestop_id AND UNIX_TIMESTAMP() < b.expiration AND b.display_type = '8' AND ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(a.lat, a.lon)) ORDER BY b.expiration ASC;"
      },
      "availableQuests": {
         "items": "select distinct quest_item_id as itemID, quest_reward_amount as rewardAmount from pokestop where quest_reward_type = 2 and quest_timestamp > {{dayStart}} and quest_timestamp < {{dayEnd}} order by quest_item_id asc;",
         "xp": "select distinct quest_reward_amount as rewardAmount from pokestop where quest_reward_type = 1 and quest_timestamp > {{dayStart}} and quest_timestamp < {{dayEnd}} order by quest_reward_amount asc;",
         "stardust": "select distinct quest_reward_amount as rewardAmount from pokestop where quest_reward_type = 3 and quest_timestamp > {{dayStart}} and quest_timestamp < {{dayEnd}} order by quest_reward_amount asc;",
         "stickers": "select distinct quest_reward_amount as rewardAmount from pokestop where quest_reward_type = 11 and quest_timestamp > {{dayStart}} and quest_timestamp < {{dayEnd}} order by quest_reward_amount asc;",
         "pokemon": "select distinct quest_pokemon_id as pokemonID from pokestop where quest_reward_type = 7 and quest_timestamp > {{dayStart}} and quest_timestamp < {{dayEnd}} order by quest_pokemon_id asc;",
         "megaEnergy": "select distinct quest_pokemon_id as pokemonID, quest_reward_amount as rewardAmount from pokestop where quest_reward_type = 12 and quest_timestamp > {{dayStart}} and quest_timestamp < {{dayEnd}} order by quest_pokemon_id asc, quest_reward_amount asc;",
         "candy": "select distinct quest_pokemon_id as pokemonID, quest_reward_amount as rewardAmount from pokestop where quest_reward_type = 4 and quest_timestamp > {{dayStart}} and quest_timestamp < {{dayEnd}} order by quest_pokemon_id asc, quest_reward_amount asc;"
      },
      "areaQuests": {
         "items": "select lat, lon, name from pokestop where quest_reward_type = 2 and quest_item_id = {{itemType}} and quest_reward_amount = {{itemAmount}} and ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(pokestop.lat, pokestop.lon)) and quest_timestamp > {{dayStart}} and quest_timestamp < {{dayEnd}} order by name;",
         "xp": "select lat, lon, name from pokestop where quest_reward_type = 1 and quest_reward_amount = {{xpAmount}} and ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(pokestop.lat, pokestop.lon)) and quest_timestamp > {{dayStart}} and quest_timestamp < {{dayEnd}} order by name;",
         "stardust": "select lat, lon, name from pokestop where quest_reward_type = 3 and quest_reward_amount = {{stardustAmount}} and ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(pokestop.lat, pokestop.lon)) and quest_timestamp > {{dayStart}} and quest_timestamp < {{dayEnd}} order by name;",
         "stickers": "",
         "pokemon": "select lat, lon, name from pokestop where quest_reward_type = 7 and quest_pokemon_id = {{pokemonID}} and ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(pokestop.lat, pokestop.lon)) and quest_timestamp > {{dayStart}} and quest_timestamp < {{dayEnd}} order by name;",
         "megaEnergy": "select lat, lon, name from pokestop where quest_reward_type = 12 and quest_pokemon_id = {{pokemonID}} and quest_reward_amount = {{energyAmount}} and ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(pokestop.lat, pokestop.lon)) and quest_timestamp > {{dayStart}} and quest_timestamp < {{dayEnd}} order by name;",
         "candy": "select lat, lon, name from pokestop where quest_reward_type = 4 and quest_pokemon_id = {{pokemonID}} and quest_reward_amount = {{candyAmount}} and ST_CONTAINS(ST_GEOMFROMTEXT('POLYGON({{area}})'), point(pokestop.lat, pokestop.lon)) and quest_timestamp > {{dayStart}} and quest_timestamp < {{dayEnd}} order by name;"
      },
      "stats": {
         "getAreas": "select distinct area FROM stats_mon_area order by area asc;",
         "getWorkers": "select distinct drago_worker as worker FROM stats_worker order by drago_worker asc;",
         "monsScanned": "select datetime 'time', sum(totMon) 'mons', 100*sum(ivMon)/sum(totMon) 'iv' from stats_mon_area where rpl = {{rpl}} and area in ({{areas}}) group by 1 order by datetime desc limit {{rplLength}};",
         "despawnLeft": "select datetime 'time', (sum(wildSecLeft)/sum(verifiedWild))/60 'wild', (sum(encSecLeft)/sum(verifiedEnc))/60 'encounter' from stats_mon_area where rpl = {{rpl}} and area in ({{areas}}) group by 1 order by datetime desc limit {{rplLength}};",
         "statResets": "select datetime 'time', sum(resetMon) 'resetMons', sum(verifiedReEnc) 'reEncounter', (sum(re_encSecLeft)/sum(verifiedReEnc))/60 'despawnLeft' from stats_mon_area where rpl = {{rpl}} and area in ({{areas}}) group by 1 order by datetime desc limit {{rplLength}};",
         "spawnpoints": "select datetime 'time', sum(spawnpoints) 'spawnpoints', 100*sum(verified)/sum(spawnpoints) 'verified', sum(seen) 'seen' from stats_spawnpoint where rpl = {{rpl}} and area in ({{areas}}) group by 1 order by datetime desc limit {{rplLength}};",
         "workerMonsScanned": "select datetime 'time', sum(mons_seen) as 'monsSeen', sum(mons_enc) as 'encountered', 100*sum(mons_enc)/sum(mons_seen) as 'iv' from stats_worker where drago_worker = '{{worker}}' and rpl = {{rpl}} group by 1 order by datetime desc limit {{rplLength}};",
         "workerHandlingTime": "select datetime 'time', sum(loc_time)/sum(loc_success) as 'handlingTime' from stats_worker where drago_worker = '{{worker}}' and rpl = {{rpl}} group by 1 order by datetime desc limit {{rplLength}};",
         "workerLocations": "select datetime 'time', sum(loc_count) as 'locations' from stats_worker where drago_worker = '{{worker}}' and rpl = {{rpl}} group by 1 order by datetime desc limit {{rplLength}};",
         "workerSuccessRate": "select datetime 'time', 100*sum(loc_success)/sum(loc_count) as 'successRate' from stats_worker where drago_worker = '{{worker}}' and rpl = {{rpl}} group by 1 order by datetime desc limit {{rplLength}};",
         "workerLostScanning": "select datetime 'time', sum(rpl)*60 - sum(loc_time) as 'lostScanning' from stats_worker where drago_worker = '{{worker}}' and rpl = {{rpl}} group by 1 order by datetime desc limit {{rplLength}};"
      },
      "leaderboard": {
         "allTimeLeaders": "select name, {{option}} as value from player where name not in ({{exludedUsers}}) order by {{option}} desc limit {{limit}};",
         "dailyLeaders": "select a.name, a.{{option}} - b.{{option}} as value from {{golbatDB}}.player a, {{leaderboardDB}}.pogo_leaderboard_trainer_history b where a.name = b.name and b.date = curdate() - interval 1 day and b.rpl = 1440 and a.name not in ({{exludedUsers}}) order by a.{{option}} - b.{{option}} desc limit {{limit}};",
         "totalDaily": "select sum(a.{{option}} - b.{{option}}) as value from {{golbatDB}}.player a, {{leaderboardDB}}.pogo_leaderboard_trainer_history b where a.name = b.name and b.date = curdate() - interval 1 day and b.rpl = 1440;",
         "playersIncluded": "select count(a.friendship_id) as value from {{golbatDB}}.player a, {{leaderboardDB}}.pogo_leaderboard_trainer_history b where a.name=b.name and b.date = curdate() - interval 1 day and b.rpl = 1440;",
         "newPlayersToday": "select count(a.friendship_id) as value from {{golbatDB}}.player a where a.name not in (select b.name from {{leaderboardDB}}.pogo_leaderboard_trainer_history b where b.date = curdate() - interval 1 day and b.rpl = 1440);"
      }
   },
   "protos": {
      "41": "Cliff",
      "42": "Arlo",
      "43": "Sierra",
      "44": "Giovanni"
   }
}
